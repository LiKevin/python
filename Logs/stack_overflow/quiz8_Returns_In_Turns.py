# -*- coding: utf-8 -*-
__author__ = 'k22li'

########################################################################################################################
# Questions:
# pyton设计一个函数，让返回值的调用来回切换，调用一次，返回1，下次调用返回0
# Fixme: 利用迭代器和闭包实现，如果不需要设置初始状态，就更简单。直接myIterator = cycle([1,0])
########################################################################################################################

# demo 1
########################################################################################################################

from itertools import cycle

def test_method():

    myIterator = cycle([1,0])

#    return myIterator.next()
    return myIterator


# demo 2
########################################################################################################################

def test_method_2(num):

    if num == 0:
        myIterator = cycle(range(2)[::-1])

        def inner():
            return myIterator.next()

        return inner
    else:

        def inner():
            return 'Pls. input num = 0'

        return inner

########################################################################################################################
# test codes
########################################################################################################################

if __name__ == '__main__':

    # demo 1
    ####################################################################################################################
    t = cycle([0, 1])
    for i in range(30):
        print str(i).zfill(2), ' --> ', t.next()

    print '*'*80

    # demo 2
    ####################################################################################################################
    p = test_method_2(0)

    for i in range(30):
        print str(i).zfill(2), ' --> ', p()

