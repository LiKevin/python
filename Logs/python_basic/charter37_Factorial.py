# -*- coding: utf-8 -*-
__author__ = 'k22li'

########################################################################################################################
# purpose:
# ways of factories implementations
########################################################################################################################

# demo 1: 一年编程经验(Python)
########################################################################################################################

def factorial_1(n):
    res = 1
    for x in xrange(2, n+1):
        res *= x
    return res

# demo 2: 懒惰的Python程序员
########################################################################################################################
def factorial_2(n):
    return n>1 and n* factorial_2(n-1) or 1

# demo 3: Python 专家
########################################################################################################################
def factorial_3(n):
    return reduce(int.__mul__, xrange(2, n+1), 1)

# demo 4: 更懒的Python程序员
########################################################################################################################
def factorial_4():
    f = lambda n : n and n*f(n-1) or 1
    return f

# demo 5: 更懒的Python程序员
########################################################################################################################
import sys

#@tailcall
def factorial_5(x, acc=1):
    if x: return factorial_5(x.__sub__(1), acc.__mul__(x))
    return acc


########################################################################################################################
# test codes
########################################################################################################################
if __name__ == '__main__':

    print factorial_1(6)

    print factorial_2(6)

    print factorial_3(6)

    print factorial_4()(6)

    print factorial_5(6)