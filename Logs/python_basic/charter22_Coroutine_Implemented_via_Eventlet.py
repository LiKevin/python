# -*- coding: utf-8 -*-
__author__ = 'k22li'

######################################################################################################################
# function implementations
# purpose is to:
# Eventlet的基础是 greenlet,这是实现 "协程(Coroutine)" 的基础.协程又被称作 "微线程“,
# 简单点说就是在一个原生线程上通过 "拷贝" 和 "切换" 堆栈帧数据来实现执行多个工作绪.
# fixme: 看上去和传统的 "单CPU,多线程(Threading)" 执行方式差不多.
# fixme: swpan() 启动一个 GreenThread 执行目标函数，wait() 返回函数执行结果。
#
# •import eventlet
# •pool = eventlet.GreenPool()
# •while True:    pool.spawn(func,args )
# 上面这段代码,几乎就是使用eventlet的范式：
# •GreenPool 用来实现协程,保证并行;
# •Spawn     用来调用相应的函数,完成具体业务
# •每个func之间切换，实施“你运行一会、我运行一会”，并且在进行切换时必须指定何时切换以及切换到哪，
# 当出现阻塞时，就显式切换到另一段没有被阻塞的代码段执行，直到原先的阻塞状况消失以后，再人工切换回原来的代码段继续处理.
########################################################################################################################

# fixme:  to be updated later ...



